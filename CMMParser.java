/* Generated By:JavaCC: Do not edit this line. CMMParser.java */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;

public class CMMParser implements CMMParserConstants {
    static SymbolTable table = new SymbolTable();
    static int level = 0;
  public static void main(String args[]) throws ParseException {
        try {
            InputStream inputstream = new FileInputStream("test.c");
            CMMParser parser = new CMMParser(inputstream);
            parser.procedure();
        }catch (Exception e){
            System.err.println(e);
        }
    }

  static final public void procedure() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      Statement();
    }
  }

  static final public void Statement() throws ParseException {
    if (jj_2_2(3)) {
      SequenceStatement();
    } else if (jj_2_3(3)) {
      IfStatement();
    } else if (jj_2_4(3)) {
      While();
    } else if (jj_2_5(3)) {
      For();
    } else if (jj_2_6(3)) {
      Read();
    } else if (jj_2_7(3)) {
      Write();
    } else if (jj_2_8(3)) {
      StatementBlock();
    } else if (jj_2_9(3)) {
      DeclareFunction();
    } else if (jj_2_10(3)) {
      FunctionCall();
    } else if (jj_2_11(3)) {
      AssignStatement();
    } else if (jj_2_12(3)) {
      Return();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public int type() throws ParseException {
    if (jj_2_13(3)) {
      jj_consume_token(INT);
          {if (true) return 0;}
    } else if (jj_2_14(3)) {
      jj_consume_token(REAL);
                            {if (true) return 1;}
    } else if (jj_2_15(3)) {
      jj_consume_token(VOID);
                                              {if (true) return 3;}
    } else if (jj_2_16(3)) {
      jj_consume_token(STRING);
                                                                  {if (true) return 2;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//顺序
  static final public void SequenceStatement() throws ParseException {
    if (jj_2_17(3)) {
      Declare();
    } else if (jj_2_18(3)) {
      AssignStatement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
  }

  static final public void Declare() throws ParseException {
                   Token tk; String name;Symbol tmp;int type;String value;
    type = type();
    tk = jj_consume_token(IDENTIFIERS);
    name = tk.image;
    tmp = new Symbol(level,name);
    tmp.setType(type);
    table.registerSymbol(tmp);
    if (jj_2_19(3)) {
      jj_consume_token(ASSIGN);
      value = expression();
                                table.symbolList.get(table.symbolList.size()-1).setValue(value);
    } else {
      ;
    }
    label_2:
    while (true) {
      if (jj_2_20(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      tk = jj_consume_token(IDENTIFIERS);
         name = tk.image;
         tmp = new Symbol(level,name);
         tmp.setType(type);
         table.registerSymbol(tmp);
      if (jj_2_21(3)) {
        jj_consume_token(ASSIGN);
        value = expression();
                                   table.symbolList.get(table.symbolList.size()-1).setValue(value);
      } else {
        ;
      }
    }
  }

  static final public void AssignStatement() throws ParseException {
                          Token tk; Symbol tmp; String value;
    tk = jj_consume_token(IDENTIFIERS);
             tmp=table.getSymbol(tk.image);
    jj_consume_token(ASSIGN);
    value = expression();
                                      tmp.setValue(value);
  }

//条件
  static final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPS);
    expression();
    jj_consume_token(RPS);
    Statement();
    if (jj_2_22(3)) {
      jj_consume_token(ELSE);
      Statement();
    } else {
      ;
    }
  }

  static final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPS);
    expression();
    jj_consume_token(RPS);
    Statement();
  }

  static final public void For() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPS);
    SequenceStatement();
    expression();
    jj_consume_token(SEMI);
    AssignStatement();
    jj_consume_token(RPS);
    Statement();
  }

  static final public void Read() throws ParseException {
Token tk;
    jj_consume_token(READ);
    jj_consume_token(LPS);
    tk = jj_consume_token(IDENTIFIERS);
         table.getSymbol(tk.image);
    jj_consume_token(RPS);
    jj_consume_token(SEMI);
  }

  static final public void Write() throws ParseException {
    jj_consume_token(WRITE);
    jj_consume_token(LPS);
    expression();
    jj_consume_token(RPS);
    jj_consume_token(SEMI);
  }

  static final public void DeclareFunction() throws ParseException {
    Token tk;FunSymbol tmp;String name;level++;
    Symbol tmp1;int type;
    type = type();
    tk = jj_consume_token(IDENTIFIERS);
        name = tk.image;
        tmp = new FunSymbol(name);
        tmp.setType(type);
        table.registerFunSymbol(tmp);
    jj_consume_token(LPS);
    if (jj_2_24(3)) {
      type = type();
      tk = jj_consume_token(IDENTIFIERS);
       name = tk.image;
       tmp1 = new Symbol(level,name);
       tmp1.setType(type);
       table.registerSymbol(tmp1);
      label_3:
      while (true) {
        if (jj_2_23(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        type = type();
        tk = jj_consume_token(IDENTIFIERS);
       name = tk.image;
       tmp1 = new Symbol(level,name);
       tmp1.setType(type);
       table.registerSymbol(tmp1);
      }
    } else {
      ;
    }
    jj_consume_token(RPS);
    StatementBlock();
  }

  static final public void StatementBlock() throws ParseException {
    jj_consume_token(LBRACE);
             level++;
    label_4:
    while (true) {
      if (jj_2_25(3)) {
        ;
      } else {
        break label_4;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
         table.deregisterSymbol(level);
         level--;
  }

  static final public String expression() throws ParseException {
                       String str1;String str2=null;int type=0;
    str1 = polynomial();
    if (jj_2_32(3)) {
      if (jj_2_26(3)) {
        jj_consume_token(EQ);
        str2 = polynomial();
                               type=1;
      } else if (jj_2_27(3)) {
        jj_consume_token(NEQ);
        str2 = polynomial();
                                 type=2;
      } else if (jj_2_28(3)) {
        jj_consume_token(GT);
        str2 = polynomial();
                                type=3;
      } else if (jj_2_29(3)) {
        jj_consume_token(GET);
        str2 = polynomial();
                                 type=4;
      } else if (jj_2_30(3)) {
        jj_consume_token(LT);
        str2 = polynomial();
                                type=5;
      } else if (jj_2_31(3)) {
        jj_consume_token(LET);
        str2 = polynomial();
                                 type=6;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
            if(str2==null) {if (true) return str1;}
            float f1 = Float.valueOf(str1);
            float f2 = Float.valueOf(str2);
            switch(type){
                case 0:  {if (true) return str1;}
                case 1: if(str1.equals(str2)) {if (true) return "1";}  else {if (true) return "0";}
                case 2:if(str1.equals(str2)) {if (true) return"0";} else {if (true) return"1";}
                case 3:if(f1>f2) {if (true) return"1";} else {if (true) return"0";}
                case 4:if(f1>=f2) {if (true) return"1";}else {if (true) return"0";}
                case 5:if(f1<f2) {if (true) return "1";}else {if (true) return"0";}
                case 6:if(f1<=f2) {if (true) return"1";}else {if (true) return"0";}
                default:{if (true) return str1;}
            }
    throw new Error("Missing return statement in function");
  }

  static final public String polynomial() throws ParseException {
                       String str1;String str2=null;int type=0;
    str1 = term();
    if (jj_2_35(3)) {
      if (jj_2_33(3)) {
        jj_consume_token(PLUS);
                            type=1;
      } else if (jj_2_34(3)) {
        jj_consume_token(MINUS);
                                             type=2;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      str2 = polynomial();
    } else {
      ;
    }
            if(str2==null) {if (true) return str1;}
            float f1 = Float.valueOf(str1);
        float f2 = Float.valueOf(str2);
        switch(type){
            case 1:float f = f1+f2;{if (true) return String.valueOf(f);}
            case 2:float f0 = f1-f2;{if (true) return String.valueOf(f0);}
            default:{if (true) return str1;}
        }
    throw new Error("Missing return statement in function");
  }

  static final public String term() throws ParseException {
                String str1;String str2=null; int type=0;
    str1 = factor();
    if (jj_2_38(3)) {
      if (jj_2_36(3)) {
        jj_consume_token(DIV);
                             type=1;
      } else if (jj_2_37(3)) {
        jj_consume_token(MUL);
                                            type=2;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      str2 = term();
    } else {
      ;
    }
            if(str2==null) {if (true) return str1;}
            float f1=Float.valueOf(str1);
            float f2=Float.valueOf(str2);
            switch(type){
                case 1:if(f2==0){if (true) throw new ParseException("The divisor can not be 0.");}else {float f=f1/f2;{if (true) return String.valueOf(f);}}
                case 2:float f0=f1*f2;{if (true) return String.valueOf(f0);}
                default:{if (true) return str1;}
            }
    throw new Error("Missing return statement in function");
  }

  static final public String factor() throws ParseException {
                  Token tk;String name;boolean isFun=false;
    if (jj_2_42(3)) {
      tk = jj_consume_token(CONSTANT);
                        {if (true) return tk.image;}
    } else if (jj_2_43(3)) {
      jj_consume_token(LPS);
      name = expression();
                                 {if (true) return name;}
      jj_consume_token(RPS);
    } else if (jj_2_44(3)) {
      jj_consume_token(PLUS);
      name = term();
                            {if (true) return name;}
    } else if (jj_2_45(3)) {
      jj_consume_token(MINUS);
      name = term();
                             {if (true) return "-"+name;}
    } else if (jj_2_46(3)) {
      tk = jj_consume_token(IDENTIFIERS);
      if (jj_2_41(3)) {
        jj_consume_token(LPS);
        if (jj_2_40(3)) {
          expression();
          label_5:
          while (true) {
            if (jj_2_39(3)) {
              ;
            } else {
              break label_5;
            }
            jj_consume_token(COMMA);
            expression();
          }
        } else {
          ;
        }
        jj_consume_token(RPS);
                                                                       isFun=true;
      } else {
        ;
      }
            name = tk.image;
            if(isFun){
                FunSymbol tmp = table.getFunSymbol(name);
                {if (true) return tmp.getValue();}
            }else{
                Symbol tmp = table.getSymbol(name);
                {if (true) return tmp.getValue();}
            }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void FunctionCall() throws ParseException {
                     Token tk;FunSymbol tmp;String name;
    tk = jj_consume_token(IDENTIFIERS);
        name=tk.image;
        tmp=new FunSymbol(name);
        table.getFunSymbol(name);
    jj_consume_token(LPS);
    if (jj_2_48(3)) {
      expression();
      label_6:
      while (true) {
        if (jj_2_47(3)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } else {
      ;
    }
    jj_consume_token(RPS);
  }

  static final public void Return() throws ParseException {
    jj_consume_token(RETURN);
    expression();
    jj_consume_token(SEMI);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIERS)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(GET)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(LPS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    if (jj_scan_token(RPS)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIERS)) return true;
    if (jj_scan_token(LPS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    if (jj_scan_token(RPS)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(IDENTIFIERS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(LPS)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RPS)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    if (jj_scan_token(LPS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(LPS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(LPS)) return true;
    if (jj_scan_token(IDENTIFIERS)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPS)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMMParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[48];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMMParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMMParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CMMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMMParser(CMMParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 48; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

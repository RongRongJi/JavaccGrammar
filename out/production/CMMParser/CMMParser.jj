options
{
  static = true;
  LOOKAHEAD=3;
}
 
PARSER_BEGIN(CMMParser)
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;

public class CMMParser
{
    static SymbolTable table = new SymbolTable();
    static int level = 0;
  public static void main(String args[]) throws ParseException {
        try {
            InputStream inputstream = new FileInputStream("test.c");
            CMMParser parser = new CMMParser(inputstream);
            parser.procedure();
        }catch (Exception e){
            System.err.println(e);
        }
    }
}

PARSER_END(CMMParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
    < CONSTANT :<INTEGER_LITERAL> | <REAL_LITERAL> | <STRING> >
    //数字
    |<#DIGIT:["0"-"9"]>
    //整数
    |<INTEGER_LITERAL:["1"-"9"](<DIGIT>)*>
    //实数
    |<REAL_LITERAL:(<DIGIT>)+
    |(<DIGIT>)+"."
    |(<DIGIT>)+"."(<DIGIT>)+
    |"."(<DIGIT>)+>
    //字符串
    |< STRING : "\"" ((~[ "\"" , "\n", "\\"] )* | (("\\" ("\"" | "\n" | "\\" | "'\n\'"))))* "\"">
}

TOKEN : /* KEYWORDS */
{
    <IF :"if">
    |<ELSE :"else">
    |<WHILE :"while">
    |<FOR :"for">
    |<READ :"read">
    |<WRITE :"write">
    |<INT :"int">
    |<REAL:"real">
    |<VOID:"void">
    |<RETURN:"return">
}

TOKEN : /* OPERATORS */
{
     <PLUS:"+">
    |<MINUS:"-">
    |<MUL:"*">
    |<DIV:"/">
    |<ASSIGN:"=">
    |<LT:"<">
    |<GT:">">
    |<LET:"<=">
    |<GET:">=">
    |<EQ:"==">
    |<NEQ:"<>">
}
TOKEN : /* RELATIONSHIPOPERATOR */
{
	<LPS:"(">
        |<RPS:")">
        |<COMMA:",">
        |<SEMI:";">
        |<LBRACE:"{">
        |<RBRACE:"}">
        |<LBRACKET:"[">
        |<RBRACKET:"]">
        |<SINQS:"'">
        |<DOUQS:"\"">
        |<ADDR:"&">
}

TOKEN : /* IDENTIFIERS */
{
  <IDENTIFIERS:["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
}


void procedure(): {

 }
{
  (Statement())*
}

void Statement(): { }
{

	    SequenceStatement()				//顺序语句
		| IfStatement()					//条件语句
		| While()						//循环语句
		| For()
		| Read()
		| Write()
		| StatementBlock()
		| DeclareFunction()
		| FunctionCall()
		| AssignStatement()
		| Return()

}
int type():{}
{
    <INT>{return 0;}|<REAL>{return 1;}|<VOID>{return 3;}|<STRING>{return 2;}
}
//顺序
void SequenceStatement(): { }
{
	(Declare()|AssignStatement()) ";"			//声明和赋值
}
void Declare() : { Token tk; String name;Symbol tmp;int type;String value;}
{
 (type=type()tk=< IDENTIFIERS>
 {
    name = tk.image;
    tmp = new Symbol(level,name);
    tmp.setType(type);
    table.registerSymbol(tmp);
 }(<ASSIGN>( value=expression(){table.symbolList.get(table.symbolList.size()-1).setValue(value);}))? (","
 tk=< IDENTIFIERS >
 {
         name = tk.image;
         tmp = new Symbol(level,name);
         tmp.setType(type);
         table.registerSymbol(tmp);
  }(< ASSIGN> ( value=expression(){table.symbolList.get(table.symbolList.size()-1).setValue(value);}))?)* )
}
void AssignStatement(): { Token tk; Symbol tmp; String value;}
{
	tk=< IDENTIFIERS>
	{
             tmp=table.getSymbol(tk.image);
	}< ASSIGN> value=expression(){tmp.setValue(value);}
}

//条件
void IfStatement():{}
{
  	< IF>< LPS>expression()< RPS>Statement()
  	(
        < ELSE > Statement()
      )?
}

void While():{}
{
    <WHILE><LPS>expression()<RPS>Statement()
}

void For():{}
{
    <FOR><LPS>SequenceStatement()expression()";"AssignStatement()<RPS>
    Statement()
}

void Read():{
Token tk;
}
{
    <READ><LPS>tk=<IDENTIFIERS>{
         table.getSymbol(tk.image);
    }<RPS>";"
}

void Write():{}
{
    <WRITE><LPS>expression()<RPS>";"
}

void DeclareFunction():{
    Token tk;FunSymbol tmp;String name;level++;
    Symbol tmp1;int type;
}
{
   type=type()tk=<IDENTIFIERS>
   {
        name = tk.image;
        tmp = new FunSymbol(name);
        tmp.setType(type);
        table.registerFunSymbol(tmp);
   }<LPS>(type=type()tk=<IDENTIFIERS>
   {
       name = tk.image;
       tmp1 = new Symbol(level,name);
       tmp1.setType(type);
       table.registerSymbol(tmp1);
   }(","type=type()tk=<IDENTIFIERS>
   {
       name = tk.image;
       tmp1 = new Symbol(level,name);
       tmp1.setType(type);
       table.registerSymbol(tmp1);
   })*)?<RPS>StatementBlock()
}

void StatementBlock():{
 }
{
    <LBRACE>{level++;}(Statement())*<RBRACE>
    {
         table.deregisterSymbol(level);
         level--;
    }
}

String expression() :{ String str1;String str2=null;int type=0;}
{
	str1=polynomial()(
	 <EQ>str2=polynomial(){type=1;}
	 |<NEQ>str2=polynomial(){type=2;}
	 |<GT>str2=polynomial(){type=3;}
	 |<GET>str2=polynomial(){type=4;}
	 |<LT>str2=polynomial(){type=5;}
	 |<LET>str2=polynomial(){type=6;}
	)?
	{
	    if(str2==null) return str1;
	    float f1 = Float.valueOf(str1);
	    float f2 = Float.valueOf(str2);
	    switch(type){
	        case 0:  return str1;
	        case 1: if(str1.equals(str2)) return "1";  else return "0";
	        case 2:if(str1.equals(str2)) return"0"; else return"1";
	        case 3:if(f1>f2) return"1"; else return"0";
	        case 4:if(f1>=f2) return"1";else return"0";
	        case 5:if(f1<f2) return "1";else return"0";
	        case 6:if(f1<=f2) return"1";else return"0";
	        default:return str1;
	    }
	}
}
String polynomial(): { String str1;String str2=null;int type=0;}
{
	str1=term()((<PLUS>{type=1;}|<MINUS>{type=2;})str2=polynomial())?
	{
	    if(str2==null) return str1;
	    float f1 = Float.valueOf(str1);
        float f2 = Float.valueOf(str2);
        switch(type){
            case 1:float f = f1+f2;return String.valueOf(f);
            case 2:float f0 = f1-f2;return String.valueOf(f0);
            default:return str1;
        }
	}
}
String term(): {String str1;String str2=null; int type=0;}
{
	str1=factor()((<DIV>{type=1;}|<MUL>{type=2;})str2=term())?
	{
	    if(str2==null) return str1;
	    float f1=Float.valueOf(str1);
	    float f2=Float.valueOf(str2);
	    switch(type){
	        case 1:if(f2==0)throw new ParseException("The divisor can not be 0.");else {float f=f1/f2;return String.valueOf(f);}
	        case 2:float f0=f1*f2;return String.valueOf(f0);
	        default:return str1;
	    }
	}
}
String factor() :{Token tk;String name;boolean isFun=false; }
{

	tk= <CONSTANT> {return tk.image;}
	| <LPS>name=expression(){return name;}<RPS>
	| <PLUS>name=term(){return name;}
	| <MINUS>name=term(){return "-"+name;}
	| tk=<IDENTIFIERS>(<LPS>(expression()(","expression())*)?<RPS>{isFun=true;})?
	{
	    name = tk.image;
            if(isFun){
                FunSymbol tmp = table.getFunSymbol(name);
                return tmp.getValue();
            }else{
                Symbol tmp = table.getSymbol(name);
                return tmp.getValue();
            }
	}
}

void FunctionCall():{Token tk;FunSymbol tmp;String name;}
{
    tk=<IDENTIFIERS>
    {
        name=tk.image;
        tmp=new FunSymbol(name);
        table.getFunSymbol(name);
    }<LPS>(expression()(","expression())*)?<RPS>
}

void Return():{}
{
    <RETURN>expression()";"
}